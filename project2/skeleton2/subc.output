State 45 conflicts: 18 shift/reduce
State 79 conflicts: 2 shift/reduce
State 80 conflicts: 2 shift/reduce
State 81 conflicts: 2 shift/reduce
State 82 conflicts: 2 shift/reduce
State 136 conflicts: 17 shift/reduce
State 137 conflicts: 17 shift/reduce
State 142 conflicts: 1 shift/reduce
State 146 conflicts: 17 shift/reduce
State 150 conflicts: 17 shift/reduce


Grammar

    0 $accept: program $end

    1 program: ext_def_list

    2 ext_def_list: ext_def_list ext_def
    3             | %empty

    4 ext_def: opt_specifier ext_decl_list ';'
    5        | opt_specifier funct_decl compound_stmt

    6 ext_decl_list: ext_decl
    7              | ext_decl_list ',' ext_decl

    8 ext_decl: var_decl
    9         | funct_decl

   10 opt_specifier: type_specifier
   11              | %empty

   12 type_specifier: TYPE
   13               | struct_specifier

   14 struct_specifier: STRUCT opt_tag '{' def_list '}'
   15                 | STRUCT ID

   16 opt_tag: ID
   17        | %empty

   18 var_decl: ID
   19         | ID '[' ']'
   20         | ID '[' INTEGER_CONST ']'
   21         | '*' ID

   22 funct_decl: ID '(' ')'
   23           | ID '(' var_list ')'

   24 var_list: param_decl
   25         | var_list ',' param_decl

   26 param_decl: type_specifier var_decl

   27 def_list: def_list def
   28         | %empty

   29 def: type_specifier decl_list ';'

   30 decl_list: decl_list ',' decl
   31          | decl

   32 decl: funct_decl
   33     | var_decl

   34 compound_stmt: %empty
   35              | '{' local_defs stmt_list '}'

   36 local_defs: def_list

   37 stmt_list: stmt_list stmt
   38          | %empty

   39 stmt: expr ';'
   40     | compound_stmt
   41     | RETURN ';'
   42     | RETURN expr ';'
   43     | ';'
   44     | IF '(' test ')' stmt
   45     | IF '(' test ')' stmt ELSE stmt
   46     | WHILE '(' test ')' stmt
   47     | FOR '(' opt_expr ';' test ';' opt_expr ')' stmt
   48     | BREAK ';'
   49     | CONTINUE ';'

   50 test: expr
   51     | %empty

   52 opt_expr: expr
   53         | %empty

   54 expr: expr ASSIGNOP expr
   55     | expr '=' expr
   56     | or_expr

   57 or_expr: or_list

   58 or_list: or_list LOGICAL_OR and_expr
   59        | or_list '|' and_expr
   60        | and_expr

   61 and_expr: and_list

   62 and_list: and_list LOGICAL_AND binary
   63         | and_list '&' binary
   64         | binary

   65 binary: binary RELOP binary
   66       | binary EQUOP binary
   67       | binary '*' binary
   68       | binary '/' binary
   69       | binary '%' binary
   70       | binary '+' binary
   71       | binary '-' binary
   72       | unary

   73 unary: '(' expr ')'
   74      | INTEGER_CONST
   75      | CHAR_CONST
   76      | ID
   77      | STRING
   78      | '-' unary
   79      | '!' unary
   80      | unary PLUS_PLUS
   81      | unary MINUS_MINUS
   82      | '&' unary
   83      | '*' unary
   84      | unary '[' expr ']'
   85      | unary STRUCTOP ID
   86      | unary '(' args ')'
   87      | unary '(' ')'

   88 args: expr
   89     | args ',' expr


Terminals, with rules where they appear

$end (0) 0
'!' (33) 79
'%' (37) 69
'&' (38) 63 82
'(' (40) 22 23 44 45 46 47 73 86 87
')' (41) 22 23 44 45 46 47 73 86 87
'*' (42) 21 67 83
'+' (43) 70
',' (44) 7 25 30 89
'-' (45) 71 78
'/' (47) 68
';' (59) 4 29 39 41 42 43 47 48 49
'=' (61) 55
'[' (91) 19 20 84
']' (93) 19 20 84
'{' (123) 14 35
'|' (124) 59
'}' (125) 14 35
error (256)
STRUCTOP (258) 85
PLUS_PLUS (259) 80
MINUS_MINUS (260) 81
UMINUS (261)
UPOINTER (262)
UADDR (263)
RELOP (264) 65
EQUOP (265) 66
LOGICAL_AND (266) 62
LOGICAL_OR (267) 58
ASSIGNOP (268) 54
TYPE (269) 12
STRUCT (270) 14 15
RETURN (271) 41 42
IF (272) 44 45
ELSE (273) 45
WHILE (274) 46
FOR (275) 47
BREAK (276) 48
CONTINUE (277) 49
ID (278) 15 16 18 19 20 21 22 23 76 85
CHAR_CONST (279) 75
STRING (280) 77
INTEGER_CONST (281) 20 74


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 1, on right: 0
ext_def_list (46)
    on left: 2 3, on right: 1 2
ext_def (47)
    on left: 4 5, on right: 2
ext_decl_list (48)
    on left: 6 7, on right: 4 7
ext_decl (49)
    on left: 8 9, on right: 6 7
opt_specifier (50)
    on left: 10 11, on right: 4 5
type_specifier (51)
    on left: 12 13, on right: 10 26 29
struct_specifier (52)
    on left: 14 15, on right: 13
opt_tag (53)
    on left: 16 17, on right: 14
var_decl (54)
    on left: 18 19 20 21, on right: 8 26 33
funct_decl (55)
    on left: 22 23, on right: 5 9 32
var_list (56)
    on left: 24 25, on right: 23 25
param_decl (57)
    on left: 26, on right: 24 25
def_list (58)
    on left: 27 28, on right: 14 27 36
def (59)
    on left: 29, on right: 27
decl_list (60)
    on left: 30 31, on right: 29 30
decl (61)
    on left: 32 33, on right: 30 31
compound_stmt (62)
    on left: 34 35, on right: 5 40
local_defs (63)
    on left: 36, on right: 35
stmt_list (64)
    on left: 37 38, on right: 35 37
stmt (65)
    on left: 39 40 41 42 43 44 45 46 47 48 49, on right: 37 44 45 46
    47
test (66)
    on left: 50 51, on right: 44 45 46 47
opt_expr (67)
    on left: 52 53, on right: 47
expr (68)
    on left: 54 55 56, on right: 39 42 50 52 54 55 73 84 88 89
or_expr (69)
    on left: 57, on right: 56
or_list (70)
    on left: 58 59 60, on right: 57 58 59
and_expr (71)
    on left: 61, on right: 58 59 60
and_list (72)
    on left: 62 63 64, on right: 61 62 63
binary (73)
    on left: 65 66 67 68 69 70 71 72, on right: 62 63 64 65 66 67 68
    69 70 71
unary (74)
    on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87, on right:
    72 78 79 80 81 82 83 84 85 86 87
args (75)
    on left: 88 89, on right: 86 89


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (ext_def_list)

    program       go to state 1
    ext_def_list  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: ext_def_list .
    2 ext_def_list: ext_def_list . ext_def

    TYPE    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $end      reduce using rule 1 (program)
    $default  reduce using rule 11 (opt_specifier)

    ext_def           go to state 6
    opt_specifier     go to state 7
    type_specifier    go to state 8
    struct_specifier  go to state 9


State 3

    0 $accept: program $end .

    $default  accept


State 4

   12 type_specifier: TYPE .

    $default  reduce using rule 12 (type_specifier)


State 5

   14 struct_specifier: STRUCT . opt_tag '{' def_list '}'
   15                 | STRUCT . ID

    ID  shift, and go to state 10

    $default  reduce using rule 17 (opt_tag)

    opt_tag  go to state 11


State 6

    2 ext_def_list: ext_def_list ext_def .

    $default  reduce using rule 2 (ext_def_list)


State 7

    4 ext_def: opt_specifier . ext_decl_list ';'
    5        | opt_specifier . funct_decl compound_stmt

    '*'  shift, and go to state 12
    ID   shift, and go to state 13

    ext_decl_list  go to state 14
    ext_decl       go to state 15
    var_decl       go to state 16
    funct_decl     go to state 17


State 8

   10 opt_specifier: type_specifier .

    $default  reduce using rule 10 (opt_specifier)


State 9

   13 type_specifier: struct_specifier .

    $default  reduce using rule 13 (type_specifier)


State 10

   15 struct_specifier: STRUCT ID .
   16 opt_tag: ID .

    '{'       reduce using rule 16 (opt_tag)
    $default  reduce using rule 15 (struct_specifier)


State 11

   14 struct_specifier: STRUCT opt_tag . '{' def_list '}'

    '{'  shift, and go to state 18


State 12

   21 var_decl: '*' . ID

    ID  shift, and go to state 19


State 13

   18 var_decl: ID .
   19         | ID . '[' ']'
   20         | ID . '[' INTEGER_CONST ']'
   22 funct_decl: ID . '(' ')'
   23           | ID . '(' var_list ')'

    '['  shift, and go to state 20
    '('  shift, and go to state 21

    $default  reduce using rule 18 (var_decl)


State 14

    4 ext_def: opt_specifier ext_decl_list . ';'
    7 ext_decl_list: ext_decl_list . ',' ext_decl

    ','  shift, and go to state 22
    ';'  shift, and go to state 23


State 15

    6 ext_decl_list: ext_decl .

    $default  reduce using rule 6 (ext_decl_list)


State 16

    8 ext_decl: var_decl .

    $default  reduce using rule 8 (ext_decl)


State 17

    5 ext_def: opt_specifier funct_decl . compound_stmt
    9 ext_decl: funct_decl .

    '{'  shift, and go to state 24

    ','       reduce using rule 9 (ext_decl)
    ';'       reduce using rule 9 (ext_decl)
    $default  reduce using rule 34 (compound_stmt)

    compound_stmt  go to state 25


State 18

   14 struct_specifier: STRUCT opt_tag '{' . def_list '}'

    $default  reduce using rule 28 (def_list)

    def_list  go to state 26


State 19

   21 var_decl: '*' ID .

    $default  reduce using rule 21 (var_decl)


State 20

   19 var_decl: ID '[' . ']'
   20         | ID '[' . INTEGER_CONST ']'

    INTEGER_CONST  shift, and go to state 27
    ']'            shift, and go to state 28


State 21

   22 funct_decl: ID '(' . ')'
   23           | ID '(' . var_list ')'

    TYPE    shift, and go to state 4
    STRUCT  shift, and go to state 5
    ')'     shift, and go to state 29

    type_specifier    go to state 30
    struct_specifier  go to state 9
    var_list          go to state 31
    param_decl        go to state 32


State 22

    7 ext_decl_list: ext_decl_list ',' . ext_decl

    '*'  shift, and go to state 12
    ID   shift, and go to state 13

    ext_decl    go to state 33
    var_decl    go to state 16
    funct_decl  go to state 34


State 23

    4 ext_def: opt_specifier ext_decl_list ';' .

    $default  reduce using rule 4 (ext_def)


State 24

   35 compound_stmt: '{' . local_defs stmt_list '}'

    $default  reduce using rule 28 (def_list)

    def_list    go to state 35
    local_defs  go to state 36


State 25

    5 ext_def: opt_specifier funct_decl compound_stmt .

    $default  reduce using rule 5 (ext_def)


State 26

   14 struct_specifier: STRUCT opt_tag '{' def_list . '}'
   27 def_list: def_list . def

    TYPE    shift, and go to state 4
    STRUCT  shift, and go to state 5
    '}'     shift, and go to state 37

    type_specifier    go to state 38
    struct_specifier  go to state 9
    def               go to state 39


State 27

   20 var_decl: ID '[' INTEGER_CONST . ']'

    ']'  shift, and go to state 40


State 28

   19 var_decl: ID '[' ']' .

    $default  reduce using rule 19 (var_decl)


State 29

   22 funct_decl: ID '(' ')' .

    $default  reduce using rule 22 (funct_decl)


State 30

   26 param_decl: type_specifier . var_decl

    '*'  shift, and go to state 12
    ID   shift, and go to state 41

    var_decl  go to state 42


State 31

   23 funct_decl: ID '(' var_list . ')'
   25 var_list: var_list . ',' param_decl

    ','  shift, and go to state 43
    ')'  shift, and go to state 44


State 32

   24 var_list: param_decl .

    $default  reduce using rule 24 (var_list)


State 33

    7 ext_decl_list: ext_decl_list ',' ext_decl .

    $default  reduce using rule 7 (ext_decl_list)


State 34

    9 ext_decl: funct_decl .

    $default  reduce using rule 9 (ext_decl)


State 35

   27 def_list: def_list . def
   36 local_defs: def_list .

    TYPE    shift, and go to state 4
    STRUCT  shift, and go to state 5

    $default  reduce using rule 36 (local_defs)

    type_specifier    go to state 38
    struct_specifier  go to state 9
    def               go to state 39


State 36

   35 compound_stmt: '{' local_defs . stmt_list '}'

    $default  reduce using rule 38 (stmt_list)

    stmt_list  go to state 45


State 37

   14 struct_specifier: STRUCT opt_tag '{' def_list '}' .

    $default  reduce using rule 14 (struct_specifier)


State 38

   29 def: type_specifier . decl_list ';'

    '*'  shift, and go to state 12
    ID   shift, and go to state 13

    var_decl    go to state 46
    funct_decl  go to state 47
    decl_list   go to state 48
    decl        go to state 49


State 39

   27 def_list: def_list def .

    $default  reduce using rule 27 (def_list)


State 40

   20 var_decl: ID '[' INTEGER_CONST ']' .

    $default  reduce using rule 20 (var_decl)


State 41

   18 var_decl: ID .
   19         | ID . '[' ']'
   20         | ID . '[' INTEGER_CONST ']'

    '['  shift, and go to state 20

    $default  reduce using rule 18 (var_decl)


State 42

   26 param_decl: type_specifier var_decl .

    $default  reduce using rule 26 (param_decl)


State 43

   25 var_list: var_list ',' . param_decl

    TYPE    shift, and go to state 4
    STRUCT  shift, and go to state 5

    type_specifier    go to state 30
    struct_specifier  go to state 9
    param_decl        go to state 50


State 44

   23 funct_decl: ID '(' var_list ')' .

    $default  reduce using rule 23 (funct_decl)


State 45

   35 compound_stmt: '{' local_defs stmt_list . '}'
   37 stmt_list: stmt_list . stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    RETURN         shift, and go to state 55
    IF             shift, and go to state 56
    WHILE          shift, and go to state 57
    FOR            shift, and go to state 58
    BREAK          shift, and go to state 59
    CONTINUE       shift, and go to state 60
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 65
    '{'            shift, and go to state 24
    '}'            shift, and go to state 66
    '('            shift, and go to state 67

    '!'            [reduce using rule 34 (compound_stmt)]
    '*'            [reduce using rule 34 (compound_stmt)]
    '-'            [reduce using rule 34 (compound_stmt)]
    '&'            [reduce using rule 34 (compound_stmt)]
    RETURN         [reduce using rule 34 (compound_stmt)]
    IF             [reduce using rule 34 (compound_stmt)]
    WHILE          [reduce using rule 34 (compound_stmt)]
    FOR            [reduce using rule 34 (compound_stmt)]
    BREAK          [reduce using rule 34 (compound_stmt)]
    CONTINUE       [reduce using rule 34 (compound_stmt)]
    ID             [reduce using rule 34 (compound_stmt)]
    CHAR_CONST     [reduce using rule 34 (compound_stmt)]
    STRING         [reduce using rule 34 (compound_stmt)]
    INTEGER_CONST  [reduce using rule 34 (compound_stmt)]
    ';'            [reduce using rule 34 (compound_stmt)]
    '{'            [reduce using rule 34 (compound_stmt)]
    '}'            [reduce using rule 34 (compound_stmt)]
    '('            [reduce using rule 34 (compound_stmt)]

    compound_stmt  go to state 68
    stmt           go to state 69
    expr           go to state 70
    or_expr        go to state 71
    or_list        go to state 72
    and_expr       go to state 73
    and_list       go to state 74
    binary         go to state 75
    unary          go to state 76


State 46

   33 decl: var_decl .

    $default  reduce using rule 33 (decl)


State 47

   32 decl: funct_decl .

    $default  reduce using rule 32 (decl)


State 48

   29 def: type_specifier decl_list . ';'
   30 decl_list: decl_list . ',' decl

    ','  shift, and go to state 77
    ';'  shift, and go to state 78


State 49

   31 decl_list: decl .

    $default  reduce using rule 31 (decl_list)


State 50

   25 var_list: var_list ',' param_decl .

    $default  reduce using rule 25 (var_list)


State 51

   79 unary: '!' . unary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    unary  go to state 79


State 52

   83 unary: '*' . unary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    unary  go to state 80


State 53

   78 unary: '-' . unary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    unary  go to state 81


State 54

   82 unary: '&' . unary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    unary  go to state 82


State 55

   41 stmt: RETURN . ';'
   42     | RETURN . expr ';'

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 83
    '('            shift, and go to state 67

    expr      go to state 84
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 56

   44 stmt: IF . '(' test ')' stmt
   45     | IF . '(' test ')' stmt ELSE stmt

    '('  shift, and go to state 85


State 57

   46 stmt: WHILE . '(' test ')' stmt

    '('  shift, and go to state 86


State 58

   47 stmt: FOR . '(' opt_expr ';' test ';' opt_expr ')' stmt

    '('  shift, and go to state 87


State 59

   48 stmt: BREAK . ';'

    ';'  shift, and go to state 88


State 60

   49 stmt: CONTINUE . ';'

    ';'  shift, and go to state 89


State 61

   76 unary: ID .

    $default  reduce using rule 76 (unary)


State 62

   75 unary: CHAR_CONST .

    $default  reduce using rule 75 (unary)


State 63

   77 unary: STRING .

    $default  reduce using rule 77 (unary)


State 64

   74 unary: INTEGER_CONST .

    $default  reduce using rule 74 (unary)


State 65

   43 stmt: ';' .

    $default  reduce using rule 43 (stmt)


State 66

   35 compound_stmt: '{' local_defs stmt_list '}' .

    $default  reduce using rule 35 (compound_stmt)


State 67

   73 unary: '(' . expr ')'

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    expr      go to state 90
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 68

   40 stmt: compound_stmt .

    $default  reduce using rule 40 (stmt)


State 69

   37 stmt_list: stmt_list stmt .

    $default  reduce using rule 37 (stmt_list)


State 70

   39 stmt: expr . ';'
   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92
    ';'       shift, and go to state 93


State 71

   56 expr: or_expr .

    $default  reduce using rule 56 (expr)


State 72

   57 or_expr: or_list .
   58 or_list: or_list . LOGICAL_OR and_expr
   59        | or_list . '|' and_expr

    '|'         shift, and go to state 94
    LOGICAL_OR  shift, and go to state 95

    $default  reduce using rule 57 (or_expr)


State 73

   60 or_list: and_expr .

    $default  reduce using rule 60 (or_list)


State 74

   61 and_expr: and_list .
   62 and_list: and_list . LOGICAL_AND binary
   63         | and_list . '&' binary

    '&'          shift, and go to state 96
    LOGICAL_AND  shift, and go to state 97

    $default  reduce using rule 61 (and_expr)


State 75

   64 and_list: binary .
   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    '*'    shift, and go to state 98
    '/'    shift, and go to state 99
    '%'    shift, and go to state 100
    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 64 (and_list)


State 76

   72 binary: unary .
   80 unary: unary . PLUS_PLUS
   81      | unary . MINUS_MINUS
   84      | unary . '[' expr ']'
   85      | unary . STRUCTOP ID
   86      | unary . '(' args ')'
   87      | unary . '(' ')'

    STRUCTOP     shift, and go to state 105
    PLUS_PLUS    shift, and go to state 106
    MINUS_MINUS  shift, and go to state 107
    '['          shift, and go to state 108
    '('          shift, and go to state 109

    $default  reduce using rule 72 (binary)


State 77

   30 decl_list: decl_list ',' . decl

    '*'  shift, and go to state 12
    ID   shift, and go to state 13

    var_decl    go to state 46
    funct_decl  go to state 47
    decl        go to state 110


State 78

   29 def: type_specifier decl_list ';' .

    $default  reduce using rule 29 (def)


State 79

   79 unary: '!' unary .
   80      | unary . PLUS_PLUS
   81      | unary . MINUS_MINUS
   84      | unary . '[' expr ']'
   85      | unary . STRUCTOP ID
   86      | unary . '(' args ')'
   87      | unary . '(' ')'

    PLUS_PLUS    shift, and go to state 106
    MINUS_MINUS  shift, and go to state 107
    '['          shift, and go to state 108
    '('          shift, and go to state 109

    '['       [reduce using rule 79 (unary)]
    '('       [reduce using rule 79 (unary)]
    $default  reduce using rule 79 (unary)


State 80

   80 unary: unary . PLUS_PLUS
   81      | unary . MINUS_MINUS
   83      | '*' unary .
   84      | unary . '[' expr ']'
   85      | unary . STRUCTOP ID
   86      | unary . '(' args ')'
   87      | unary . '(' ')'

    '['  shift, and go to state 108
    '('  shift, and go to state 109

    '['       [reduce using rule 83 (unary)]
    '('       [reduce using rule 83 (unary)]
    $default  reduce using rule 83 (unary)


State 81

   78 unary: '-' unary .
   80      | unary . PLUS_PLUS
   81      | unary . MINUS_MINUS
   84      | unary . '[' expr ']'
   85      | unary . STRUCTOP ID
   86      | unary . '(' args ')'
   87      | unary . '(' ')'

    '['  shift, and go to state 108
    '('  shift, and go to state 109

    '['       [reduce using rule 78 (unary)]
    '('       [reduce using rule 78 (unary)]
    $default  reduce using rule 78 (unary)


State 82

   80 unary: unary . PLUS_PLUS
   81      | unary . MINUS_MINUS
   82      | '&' unary .
   84      | unary . '[' expr ']'
   85      | unary . STRUCTOP ID
   86      | unary . '(' args ')'
   87      | unary . '(' ')'

    '['  shift, and go to state 108
    '('  shift, and go to state 109

    '['       [reduce using rule 82 (unary)]
    '('       [reduce using rule 82 (unary)]
    $default  reduce using rule 82 (unary)


State 83

   41 stmt: RETURN ';' .

    $default  reduce using rule 41 (stmt)


State 84

   42 stmt: RETURN expr . ';'
   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92
    ';'       shift, and go to state 111


State 85

   44 stmt: IF '(' . test ')' stmt
   45     | IF '(' . test ')' stmt ELSE stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    $default  reduce using rule 51 (test)

    test      go to state 112
    expr      go to state 113
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 86

   46 stmt: WHILE '(' . test ')' stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    $default  reduce using rule 51 (test)

    test      go to state 114
    expr      go to state 113
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 87

   47 stmt: FOR '(' . opt_expr ';' test ';' opt_expr ')' stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    $default  reduce using rule 53 (opt_expr)

    opt_expr  go to state 115
    expr      go to state 116
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 88

   48 stmt: BREAK ';' .

    $default  reduce using rule 48 (stmt)


State 89

   49 stmt: CONTINUE ';' .

    $default  reduce using rule 49 (stmt)


State 90

   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr
   73 unary: '(' expr . ')'

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92
    ')'       shift, and go to state 117


State 91

   54 expr: expr ASSIGNOP . expr

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    expr      go to state 118
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 92

   55 expr: expr '=' . expr

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    expr      go to state 119
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 93

   39 stmt: expr ';' .

    $default  reduce using rule 39 (stmt)


State 94

   59 or_list: or_list '|' . and_expr

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    and_expr  go to state 120
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 95

   58 or_list: or_list LOGICAL_OR . and_expr

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    and_expr  go to state 121
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 96

   63 and_list: and_list '&' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 122
    unary   go to state 76


State 97

   62 and_list: and_list LOGICAL_AND . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 123
    unary   go to state 76


State 98

   67 binary: binary '*' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 124
    unary   go to state 76


State 99

   68 binary: binary '/' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 125
    unary   go to state 76


State 100

   69 binary: binary '%' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 126
    unary   go to state 76


State 101

   70 binary: binary '+' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 127
    unary   go to state 76


State 102

   71 binary: binary '-' . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 128
    unary   go to state 76


State 103

   65 binary: binary RELOP . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 129
    unary   go to state 76


State 104

   66 binary: binary EQUOP . binary

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    binary  go to state 130
    unary   go to state 76


State 105

   85 unary: unary STRUCTOP . ID

    ID  shift, and go to state 131


State 106

   80 unary: unary PLUS_PLUS .

    $default  reduce using rule 80 (unary)


State 107

   81 unary: unary MINUS_MINUS .

    $default  reduce using rule 81 (unary)


State 108

   84 unary: unary '[' . expr ']'

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    expr      go to state 132
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 109

   86 unary: unary '(' . args ')'
   87      | unary '(' . ')'

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67
    ')'            shift, and go to state 133

    expr      go to state 134
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76
    args      go to state 135


State 110

   30 decl_list: decl_list ',' decl .

    $default  reduce using rule 30 (decl_list)


State 111

   42 stmt: RETURN expr ';' .

    $default  reduce using rule 42 (stmt)


State 112

   44 stmt: IF '(' test . ')' stmt
   45     | IF '(' test . ')' stmt ELSE stmt

    ')'  shift, and go to state 136


State 113

   50 test: expr .
   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 50 (test)


State 114

   46 stmt: WHILE '(' test . ')' stmt

    ')'  shift, and go to state 137


State 115

   47 stmt: FOR '(' opt_expr . ';' test ';' opt_expr ')' stmt

    ';'  shift, and go to state 138


State 116

   52 opt_expr: expr .
   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 52 (opt_expr)


State 117

   73 unary: '(' expr ')' .

    $default  reduce using rule 73 (unary)


State 118

   54 expr: expr . ASSIGNOP expr
   54     | expr ASSIGNOP expr .
   55     | expr . '=' expr

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 54 (expr)


State 119

   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr
   55     | expr '=' expr .

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 55 (expr)


State 120

   59 or_list: or_list '|' and_expr .

    $default  reduce using rule 59 (or_list)


State 121

   58 or_list: or_list LOGICAL_OR and_expr .

    $default  reduce using rule 58 (or_list)


State 122

   63 and_list: and_list '&' binary .
   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    '*'    shift, and go to state 98
    '/'    shift, and go to state 99
    '%'    shift, and go to state 100
    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 63 (and_list)


State 123

   62 and_list: and_list LOGICAL_AND binary .
   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    '*'    shift, and go to state 98
    '/'    shift, and go to state 99
    '%'    shift, and go to state 100
    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 62 (and_list)


State 124

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   67       | binary '*' binary .
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 67 (binary)


State 125

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   68       | binary '/' binary .
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 68 (binary)


State 126

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   69       | binary '%' binary .
   70       | binary . '+' binary
   71       | binary . '-' binary

    '+'    shift, and go to state 101
    '-'    shift, and go to state 102
    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 69 (binary)


State 127

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   70       | binary '+' binary .
   71       | binary . '-' binary

    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 70 (binary)


State 128

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary
   71       | binary '-' binary .

    RELOP  shift, and go to state 103
    EQUOP  shift, and go to state 104

    $default  reduce using rule 71 (binary)


State 129

   65 binary: binary . RELOP binary
   65       | binary RELOP binary .
   66       | binary . EQUOP binary
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    EQUOP  shift, and go to state 104

    $default  reduce using rule 65 (binary)


State 130

   65 binary: binary . RELOP binary
   66       | binary . EQUOP binary
   66       | binary EQUOP binary .
   67       | binary . '*' binary
   68       | binary . '/' binary
   69       | binary . '%' binary
   70       | binary . '+' binary
   71       | binary . '-' binary

    $default  reduce using rule 66 (binary)


State 131

   85 unary: unary STRUCTOP ID .

    $default  reduce using rule 85 (unary)


State 132

   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr
   84 unary: unary '[' expr . ']'

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92
    ']'       shift, and go to state 139


State 133

   87 unary: unary '(' ')' .

    $default  reduce using rule 87 (unary)


State 134

   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr
   88 args: expr .

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 88 (args)


State 135

   86 unary: unary '(' args . ')'
   89 args: args . ',' expr

    ','  shift, and go to state 140
    ')'  shift, and go to state 141


State 136

   44 stmt: IF '(' test ')' . stmt
   45     | IF '(' test ')' . stmt ELSE stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    RETURN         shift, and go to state 55
    IF             shift, and go to state 56
    WHILE          shift, and go to state 57
    FOR            shift, and go to state 58
    BREAK          shift, and go to state 59
    CONTINUE       shift, and go to state 60
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 65
    '{'            shift, and go to state 24
    '('            shift, and go to state 67

    '!'            [reduce using rule 34 (compound_stmt)]
    '*'            [reduce using rule 34 (compound_stmt)]
    '-'            [reduce using rule 34 (compound_stmt)]
    '&'            [reduce using rule 34 (compound_stmt)]
    RETURN         [reduce using rule 34 (compound_stmt)]
    IF             [reduce using rule 34 (compound_stmt)]
    WHILE          [reduce using rule 34 (compound_stmt)]
    FOR            [reduce using rule 34 (compound_stmt)]
    BREAK          [reduce using rule 34 (compound_stmt)]
    CONTINUE       [reduce using rule 34 (compound_stmt)]
    ID             [reduce using rule 34 (compound_stmt)]
    CHAR_CONST     [reduce using rule 34 (compound_stmt)]
    STRING         [reduce using rule 34 (compound_stmt)]
    INTEGER_CONST  [reduce using rule 34 (compound_stmt)]
    ';'            [reduce using rule 34 (compound_stmt)]
    '{'            [reduce using rule 34 (compound_stmt)]
    '('            [reduce using rule 34 (compound_stmt)]
    $default       reduce using rule 34 (compound_stmt)

    compound_stmt  go to state 68
    stmt           go to state 142
    expr           go to state 70
    or_expr        go to state 71
    or_list        go to state 72
    and_expr       go to state 73
    and_list       go to state 74
    binary         go to state 75
    unary          go to state 76


State 137

   46 stmt: WHILE '(' test ')' . stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    RETURN         shift, and go to state 55
    IF             shift, and go to state 56
    WHILE          shift, and go to state 57
    FOR            shift, and go to state 58
    BREAK          shift, and go to state 59
    CONTINUE       shift, and go to state 60
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 65
    '{'            shift, and go to state 24
    '('            shift, and go to state 67

    '!'            [reduce using rule 34 (compound_stmt)]
    '*'            [reduce using rule 34 (compound_stmt)]
    '-'            [reduce using rule 34 (compound_stmt)]
    '&'            [reduce using rule 34 (compound_stmt)]
    RETURN         [reduce using rule 34 (compound_stmt)]
    IF             [reduce using rule 34 (compound_stmt)]
    WHILE          [reduce using rule 34 (compound_stmt)]
    FOR            [reduce using rule 34 (compound_stmt)]
    BREAK          [reduce using rule 34 (compound_stmt)]
    CONTINUE       [reduce using rule 34 (compound_stmt)]
    ID             [reduce using rule 34 (compound_stmt)]
    CHAR_CONST     [reduce using rule 34 (compound_stmt)]
    STRING         [reduce using rule 34 (compound_stmt)]
    INTEGER_CONST  [reduce using rule 34 (compound_stmt)]
    ';'            [reduce using rule 34 (compound_stmt)]
    '{'            [reduce using rule 34 (compound_stmt)]
    '('            [reduce using rule 34 (compound_stmt)]
    $default       reduce using rule 34 (compound_stmt)

    compound_stmt  go to state 68
    stmt           go to state 143
    expr           go to state 70
    or_expr        go to state 71
    or_list        go to state 72
    and_expr       go to state 73
    and_list       go to state 74
    binary         go to state 75
    unary          go to state 76


State 138

   47 stmt: FOR '(' opt_expr ';' . test ';' opt_expr ')' stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    $default  reduce using rule 51 (test)

    test      go to state 144
    expr      go to state 113
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 139

   84 unary: unary '[' expr ']' .

    $default  reduce using rule 84 (unary)


State 140

   89 args: args ',' . expr

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    expr      go to state 145
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 141

   86 unary: unary '(' args ')' .

    $default  reduce using rule 86 (unary)


State 142

   44 stmt: IF '(' test ')' stmt .
   45     | IF '(' test ')' stmt . ELSE stmt

    ELSE  shift, and go to state 146

    ELSE      [reduce using rule 44 (stmt)]
    $default  reduce using rule 44 (stmt)


State 143

   46 stmt: WHILE '(' test ')' stmt .

    $default  reduce using rule 46 (stmt)


State 144

   47 stmt: FOR '(' opt_expr ';' test . ';' opt_expr ')' stmt

    ';'  shift, and go to state 147


State 145

   54 expr: expr . ASSIGNOP expr
   55     | expr . '=' expr
   89 args: args ',' expr .

    ASSIGNOP  shift, and go to state 91
    '='       shift, and go to state 92

    $default  reduce using rule 89 (args)


State 146

   45 stmt: IF '(' test ')' stmt ELSE . stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    RETURN         shift, and go to state 55
    IF             shift, and go to state 56
    WHILE          shift, and go to state 57
    FOR            shift, and go to state 58
    BREAK          shift, and go to state 59
    CONTINUE       shift, and go to state 60
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 65
    '{'            shift, and go to state 24
    '('            shift, and go to state 67

    '!'            [reduce using rule 34 (compound_stmt)]
    '*'            [reduce using rule 34 (compound_stmt)]
    '-'            [reduce using rule 34 (compound_stmt)]
    '&'            [reduce using rule 34 (compound_stmt)]
    RETURN         [reduce using rule 34 (compound_stmt)]
    IF             [reduce using rule 34 (compound_stmt)]
    WHILE          [reduce using rule 34 (compound_stmt)]
    FOR            [reduce using rule 34 (compound_stmt)]
    BREAK          [reduce using rule 34 (compound_stmt)]
    CONTINUE       [reduce using rule 34 (compound_stmt)]
    ID             [reduce using rule 34 (compound_stmt)]
    CHAR_CONST     [reduce using rule 34 (compound_stmt)]
    STRING         [reduce using rule 34 (compound_stmt)]
    INTEGER_CONST  [reduce using rule 34 (compound_stmt)]
    ';'            [reduce using rule 34 (compound_stmt)]
    '{'            [reduce using rule 34 (compound_stmt)]
    '('            [reduce using rule 34 (compound_stmt)]
    $default       reduce using rule 34 (compound_stmt)

    compound_stmt  go to state 68
    stmt           go to state 148
    expr           go to state 70
    or_expr        go to state 71
    or_list        go to state 72
    and_expr       go to state 73
    and_list       go to state 74
    binary         go to state 75
    unary          go to state 76


State 147

   47 stmt: FOR '(' opt_expr ';' test ';' . opt_expr ')' stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    '('            shift, and go to state 67

    $default  reduce using rule 53 (opt_expr)

    opt_expr  go to state 149
    expr      go to state 116
    or_expr   go to state 71
    or_list   go to state 72
    and_expr  go to state 73
    and_list  go to state 74
    binary    go to state 75
    unary     go to state 76


State 148

   45 stmt: IF '(' test ')' stmt ELSE stmt .

    $default  reduce using rule 45 (stmt)


State 149

   47 stmt: FOR '(' opt_expr ';' test ';' opt_expr . ')' stmt

    ')'  shift, and go to state 150


State 150

   47 stmt: FOR '(' opt_expr ';' test ';' opt_expr ')' . stmt

    '!'            shift, and go to state 51
    '*'            shift, and go to state 52
    '-'            shift, and go to state 53
    '&'            shift, and go to state 54
    RETURN         shift, and go to state 55
    IF             shift, and go to state 56
    WHILE          shift, and go to state 57
    FOR            shift, and go to state 58
    BREAK          shift, and go to state 59
    CONTINUE       shift, and go to state 60
    ID             shift, and go to state 61
    CHAR_CONST     shift, and go to state 62
    STRING         shift, and go to state 63
    INTEGER_CONST  shift, and go to state 64
    ';'            shift, and go to state 65
    '{'            shift, and go to state 24
    '('            shift, and go to state 67

    '!'            [reduce using rule 34 (compound_stmt)]
    '*'            [reduce using rule 34 (compound_stmt)]
    '-'            [reduce using rule 34 (compound_stmt)]
    '&'            [reduce using rule 34 (compound_stmt)]
    RETURN         [reduce using rule 34 (compound_stmt)]
    IF             [reduce using rule 34 (compound_stmt)]
    WHILE          [reduce using rule 34 (compound_stmt)]
    FOR            [reduce using rule 34 (compound_stmt)]
    BREAK          [reduce using rule 34 (compound_stmt)]
    CONTINUE       [reduce using rule 34 (compound_stmt)]
    ID             [reduce using rule 34 (compound_stmt)]
    CHAR_CONST     [reduce using rule 34 (compound_stmt)]
    STRING         [reduce using rule 34 (compound_stmt)]
    INTEGER_CONST  [reduce using rule 34 (compound_stmt)]
    ';'            [reduce using rule 34 (compound_stmt)]
    '{'            [reduce using rule 34 (compound_stmt)]
    '('            [reduce using rule 34 (compound_stmt)]
    $default       reduce using rule 34 (compound_stmt)

    compound_stmt  go to state 68
    stmt           go to state 151
    expr           go to state 70
    or_expr        go to state 71
    or_list        go to state 72
    and_expr       go to state 73
    and_list       go to state 74
    binary         go to state 75
    unary          go to state 76


State 151

   47 stmt: FOR '(' opt_expr ';' test ';' opt_expr ')' stmt .

    $default  reduce using rule 47 (stmt)
